import org.apache.commons.io.FileUtils;

def armaObjectsMods = [
  '@cba_a3',
  '@cup_terrains_core',
  '@sfp_objects_nightly',
]

task setupTestMission << {
  def spawnSqf = file("${rootProject.missionDir}/mrg_objectDumper.sqf")
  spawnSqf.append('''
  endMission "END1";
  ''')

  File initSqfFile = file("${rootProject.missionDir}/init.sqf")
  String initSqf = FileUtils.readFileToString(initSqfFile, "UTF-8")
  initSqf = initSqf.replaceAll("sfp", "land_sfp")
  FileUtils.writeStringToFile(initSqfFile, initSqf, "UTF-8")
}
setupTestMission.dependsOn(cloneTestMission)

task downloadSFPObjects << {
  delete 'tmp'
  mkdir 'tmp'
  delete 'tmp/archive'
  delete 'tmp/archive.zip'
  download {
    src 'http://jenkins.anrop.se/job/sfp_objects/lastSuccessfulBuild/artifact/*zip*/archive.zip'
    dest 'tmp'
  }
}

task extractSFPObjects(dependsOn: downloadSFPObjects, type: Copy) {
  outputs.upToDateWhen { false }
  from zipTree(file('tmp/archive.zip'))
  into file("tmp")
}

task moveSFPObjects(dependsOn: [extractSFPObjects, locateArma3]) << {
  File source = file("tmp/archive/@sfp_objects")
  File target = file("${project.ext.arma3dir}/@sfp_objects_nightly")
  delete target
  FileUtils.moveDirectory(source, target);
}

task downloadLatestSFPObjects(dependsOn: moveSFPObjects) {

}

task runAutotest << {
  String armaExecutable = "${project.ext.arma3dir}/arma3.exe"
  String autotestFilePath = new File(rootProject.autotestFile).getAbsolutePath()
  String autotest = "-autotest=${autotestFilePath}"
  String mods = "-mod=${armaObjectsMods.join(';')}"

  def pb = new ProcessBuilder([
    armaExecutable,
    autotest,
    mods,
    "-world=empty",
    "-noPause",
    "-noSplash",
    "-window",
  ]).start().waitFor()
}
runAutotest.dependsOn(setupTestMission)
runAutotest.dependsOn(generateAutotestFile)
runAutotest.dependsOn(locateArma3)
runAutotest.mustRunAfter(downloadLatestSFPObjects)
