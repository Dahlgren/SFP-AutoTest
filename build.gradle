buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath  'commons-io:commons-io:2.5'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '1.5.1'
  id 'de.undercouch.download' version '3.1.1'
}

import org.apache.commons.io.FileUtils;

def armaMods = [
  '@cba_a3',
  '@sfp_nightly',
]

def missionDir = 'mrg_objectDumper.VR'
def missionRepo = 'https://github.com/SwedishForcesPack/mrg_objectDumper.VR.git'

def autotestFile = 'autotest.cfg'

def registryPaths = [
  'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
  'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
  'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
  'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
]

task cloneTestMission << {
  delete missionDir
  def grgit = org.ajoberstar.grgit.Grgit.clone(dir: missionDir, uri: missionRepo)
}

task setupTestMission << {
  def spawnSqf = new File("${missionDir}/mrg_objectDumper.sqf")
  spawnSqf.append('''
  endMission "END1";
  ''')
}
setupTestMission.dependsOn(cloneTestMission)

task generateAutotestFile << {
  String missionPath = new File(missionDir).getAbsolutePath()
  String fileContent = """
  class TestMissions
  {
    class TestCase01
    {
      campaign = \"\";
      mission = \"${missionPath}\";
    };
  };
  """.stripIndent()
  new File(autotestFile).write(fileContent)
}

task locateArma3 << {
  def found = false;
  def registryDivider = "    "

  registryPaths.each { String query ->
    Process process = Runtime.getRuntime().exec(query);

    InputStream is = process.getInputStream();
    StringBuilder sw = new StringBuilder();

    try
    {
      int c;
      while ((c = is.read()) != -1) {
        sw.append((char)c);
      }
    }
    catch (IOException e)
    { 
    }

    String output = sw.toString();

    if(!output.contains(registryDivider)) {
      return null;
    }

    // Parse out the value
    String[] parsed = output.split(registryDivider);
    project.ext.arma3dir = parsed[parsed.length-1].trim();
    found = true
  }

  if (!found) {
    throw new GradleException("Arma 3 directory could not be found")
  }
}

task downloadSFP << {
  delete 'tmp'
  mkdir 'tmp'
  delete 'tmp/archive'
  delete 'tmp/archive.zip'
  download {
    src 'http://jenkins.anrop.se/job/sfp/lastSuccessfulBuild/artifact/*zip*/archive.zip'
    dest 'tmp'
  }
}

task extractSFP(dependsOn: downloadSFP, type: Copy) {
  outputs.upToDateWhen { false }  
  from zipTree(file('tmp/archive.zip'))
  into file("tmp")
}

task moveSFP(dependsOn: [extractSFP, locateArma3]) << {
  File source = file("tmp/archive/@sfp")
  File target = file("${project.ext.arma3dir}/@sfp_nightly")
  delete target
  FileUtils.moveDirectory(source, target);
}

task downloadLatestSFP(dependsOn: moveSFP) {

}

task runAutotest << {
  String armaExecutable = "${project.ext.arma3dir}/arma3.exe"
  String autotestFilePath = new File(autotestFile).getAbsolutePath()
  String autotest = "-autotest=${autotestFilePath}"
  String mods = "-mod=${armaMods.join(';')}"

  def pb = new ProcessBuilder([
    armaExecutable,
    autotest,
    mods,
    "-world=empty",
    "-noPause",
    "-noSplash",
    "-window",
  ]).start().waitFor()
}
runAutotest.dependsOn(setupTestMission)
runAutotest.dependsOn(generateAutotestFile)
runAutotest.dependsOn(locateArma3)
runAutotest.mustRunAfter(downloadLatestSFP)

task copyLogFile << {
  def logsDir = 'logs'
  def localAppData = System.getenv('LOCALAPPDATA')
  def logFiles = file("${localAppData}/Arma 3").listFiles().findAll { it.name.startsWith('arma3_') && it.name.endsWith('.rpt') }
  File source = logFiles.sort().last()
  delete logsDir
  mkdir logsDir
  FileUtils.copyFileToDirectory(source, file(logsDir))
}
copyLogFile.mustRunAfter(runAutotest)
