buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath  'commons-io:commons-io:2.5'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '1.5.1'
  id 'de.undercouch.download' version '3.1.1'
}

import org.apache.commons.io.FileUtils;

subprojects {
  project.ext.autotestFile = 'autotest.cfg'

  task cloneIslandTestMission << {
    def missionRepo = 'https://github.com/SwedishForcesPack/sfp_island_auto_test.VR.git'

    delete file(missionDir).getAbsolutePath()
    def grgit = org.ajoberstar.grgit.Grgit.clone(dir: file(missionDir).getAbsolutePath(), uri: missionRepo)
  }

  task cloneObjectDumperTestMission << {
    def missionRepo = 'https://github.com/SwedishForcesPack/mrg_objectDumper.VR.git'

    delete file(missionDir).getAbsolutePath()
    def grgit = org.ajoberstar.grgit.Grgit.clone(dir: file(missionDir).getAbsolutePath(), uri: missionRepo)
  }

  task generateAutotestFile << {
    String missionPath = file(missionDir).getAbsolutePath()
    String fileContent = """
    class TestMissions
    {
      class TestCase01
      {
        campaign = \"\";
        mission = \"${missionPath}\";
      };
    };
    """.stripIndent()
    new File(autotestFile).write(fileContent)
  }

  task locateArma3 << {
    def registryPaths = [
      'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
    ]

    def found = false;
    def registryDivider = "    "

    registryPaths.each { String query ->
      Process process = Runtime.getRuntime().exec(query);

      InputStream is = process.getInputStream();
      StringBuilder sw = new StringBuilder();

      try
      {
        int c;
        while ((c = is.read()) != -1) {
          sw.append((char)c);
        }
      }
      catch (IOException e)
      {
      }

      String output = sw.toString();

      if(!output.contains(registryDivider)) {
        return null;
      }

      // Parse out the value
      String[] parsed = output.split(registryDivider);
      project.ext.arma3dir = parsed[parsed.length-1].trim();
      found = true
    }

    if (!found) {
      throw new GradleException("Arma 3 directory could not be found")
    }
  }

  task downloadModFromJenkins << {
    delete file('tmp').getAbsolutePath()
    mkdir file('tmp').getAbsolutePath()
    delete file('tmp/archive').getAbsolutePath()
    delete file('tmp/archive.zip').getAbsolutePath()
    download {
      src "http://jenkins.anrop.se/job/${mod}/lastSuccessfulBuild/artifact/*zip*/archive.zip"
      dest file('tmp').getAbsolutePath()
    }
  }

  task extractMod(dependsOn: downloadModFromJenkins, type: Copy) {
    outputs.upToDateWhen { false }
    from zipTree(file('tmp/archive.zip'))
    into file("tmp")
  }

  task moveMod(dependsOn: [extractMod, locateArma3]) << {
    File source = file("tmp/archive/@${mod}")
    File target = file("${arma3dir}/@${mod}_nightly")
    delete target
    FileUtils.moveDirectory(source, target);
  }

  task downloadMod(dependsOn: moveMod) {

  }

  task runAutotest << {
    String armaExecutable = "${arma3dir}/arma3.exe"
    String autotestFilePath = new File(autotestFile).getAbsolutePath()
    String autotest = "-autotest=${autotestFilePath}"
    String mods = "-mod=${mods.join(';')}"

    def pb = new ProcessBuilder([
      armaExecutable,
      autotest,
      mods,
      "-world=empty",
      "-noPause",
      "-noSplash",
      "-window",
    ]).start().waitFor()
  }
  runAutotest.dependsOn(generateAutotestFile)
  runAutotest.dependsOn(locateArma3)
  runAutotest.mustRunAfter(downloadMod)

  task copyLogFile << {
    def logsDir = file('logs')
    def localAppData = System.getenv('LOCALAPPDATA')
    def logFiles = file("${localAppData}/Arma 3").listFiles().findAll { it.name.startsWith('arma3_') && it.name.endsWith('.rpt') }
    File source = logFiles.sort().last()
    delete logsDir
    mkdir logsDir
    FileUtils.copyFileToDirectory(source, logsDir)
  }
}
