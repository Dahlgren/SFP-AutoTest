buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath  'commons-io:commons-io:2.5'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '1.5.1'
  id 'de.undercouch.download' version '3.1.1'
}

import org.apache.commons.io.FileUtils;

allprojects {
  project.ext.missionDir = 'mrg_objectDumper.VR'
  project.ext.autotestFile = 'autotest.cfg'

  task cloneTestMission << {
    def missionRepo = 'https://github.com/SwedishForcesPack/mrg_objectDumper.VR.git'

    delete file(rootProject.missionDir).getAbsolutePath()
    def grgit = org.ajoberstar.grgit.Grgit.clone(dir: file(rootProject.missionDir).getAbsolutePath(), uri: missionRepo)
  }

  task generateAutotestFile << {
    String missionPath = file(rootProject.missionDir).getAbsolutePath()
    String fileContent = """
    class TestMissions
    {
      class TestCase01
      {
        campaign = \"\";
        mission = \"${missionPath}\";
      };
    };
    """.stripIndent()
    new File(rootProject.autotestFile).write(fileContent)
  }

  task locateArma3 << {
    def registryPaths = [
      'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
      'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
    ]

    def found = false;
    def registryDivider = "    "

    registryPaths.each { String query ->
      Process process = Runtime.getRuntime().exec(query);

      InputStream is = process.getInputStream();
      StringBuilder sw = new StringBuilder();

      try
      {
        int c;
        while ((c = is.read()) != -1) {
          sw.append((char)c);
        }
      }
      catch (IOException e)
      {
      }

      String output = sw.toString();

      if(!output.contains(registryDivider)) {
        return null;
      }

      // Parse out the value
      String[] parsed = output.split(registryDivider);
      project.ext.arma3dir = parsed[parsed.length-1].trim();
      found = true
    }

    if (!found) {
      throw new GradleException("Arma 3 directory could not be found")
    }
  }

  task copyLogFile << {
    def logsDir = 'logs'
    def localAppData = System.getenv('LOCALAPPDATA')
    def logFiles = file("${localAppData}/Arma 3").listFiles().findAll { it.name.startsWith('arma3_') && it.name.endsWith('.rpt') }
    File source = logFiles.sort().last()
    delete logsDir
    mkdir logsDir
    FileUtils.copyFileToDirectory(source, file(logsDir))
  }
}
