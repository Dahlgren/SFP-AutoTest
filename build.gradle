buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath  'commons-io:commons-io:2.5'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '1.5.1'
  id 'de.undercouch.download' version '3.1.1'
}

import java.nio.file.Paths;
import org.apache.commons.io.FileUtils;

task locateArma3 << {
  def registryPaths = [
    'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
    'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive Studio\\ArmA 3" /v "MAIN"',
    'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
    'REG QUERY "HKLM\\SOFTWARE\\Bohemia Interactive\\ArmA 3" /v "MAIN"',
  ]

  def found = false;
  def registryDivider = "    "

  registryPaths.each { String query ->
    Process process = Runtime.getRuntime().exec(query);

    InputStream is = process.getInputStream();
    StringBuilder sw = new StringBuilder();

    try
    {
      int c;
      while ((c = is.read()) != -1) {
        sw.append((char)c);
      }
    }
    catch (IOException e)
    {
    }

    String output = sw.toString();

    if(!output.contains(registryDivider)) {
      return null;
    }

    // Parse out the value
    String[] parsed = output.split(registryDivider);
    project.ext.arma3dir = parsed[parsed.length-1].trim();
    found = true
  }

  if (!found) {
    throw new GradleException("Arma 3 directory could not be found")
  }
}

subprojects {
  project.ext.armaProfile = 'autotest'
  project.ext.autotestFile = 'autotest.cfg'
  project.ext.missions = []

  project.ext.testMissionIsland = 'https://github.com/SwedishForcesPack/sfp_island_auto_test.VR.git'
  project.ext.testMissionObjectDumper = 'https://github.com/SwedishForcesPack/mrg_objectDumper.VR.git'
  project.ext.testMissionRoad = 'https://github.com/SwedishForcesPack/sfp_road_test.sfp_roso.git'

  project.ext.createTestMissionTask = { repository, missionDir ->
    def missionTask = task("test_mission_${missionDir}") << {
      String missionPath = file(missionDir).getAbsolutePath()

      delete missionPath
      def grgit = org.ajoberstar.grgit.Grgit.clone(dir: missionPath, uri: repository)

      missions.add(missionPath)
    }

    generateAutotestFile.dependsOn(missionTask)

    return missionTask
  }

  task generateAutotestFile << {
    def idx = 1
    String missionClasses = missions.collect { mission ->
      return """
      class TestCase${idx++}
      {
        campaign = \"\";
        mission = \"${mission}\";
      };
      """
    }.join("\n")

    String fileContent = """
    class TestMissions
    {
      ${missionClasses}
    };
    """.stripIndent()

    new File(autotestFile).write(fileContent)
  }

  task downloadMods() {
    outputs.upToDateWhen { false }

    doLast {
      def args = ["SteamWorkshop.exe", "--priority", "107410"] + mods
      def process = new ProcessBuilder(args).inheritIO().start()
      process.waitFor()

      if (process.exitValue() > 0) {
        throw new GradleException("Steam Workshop download failed")
      }
    }
  }

  task setupProfile << {
    def userProfileDir = System.getenv('USERPROFILE')
    def armaProfileDir = file("${userProfileDir}/Documents/Arma 3 - Other Profiles/${armaProfile}")
    delete armaProfileDir
    armaProfileDir.mkdirs()
    file("${armaProfileDir}/${armaProfile}.Arma3Profile").write("maxScreenShotFolderSizeMB=2000;")
  }

  task runAutotest {
    ext {
      getModPath = { mod ->
        return Paths.get(arma3dir, "..", "..", "workshop", "content", "107410", mod).normalize()
      }
    }

    doLast {
      String armaExecutable = "${arma3dir}/arma3.exe"
      String autotestFilePath = new File(autotestFile).getAbsolutePath()
      String autotest = "-autotest=${autotestFilePath}"
      String mods = "-mod=${mods.collect(getModPath).join(';')}"

      def pb = new ProcessBuilder([
        armaExecutable,
        autotest,
        mods,
        "-name=autotest",
        "-world=empty",
        "-noPause",
        "-noSplash",
        "-window",
      ]).start().waitFor()
    }
  }
  runAutotest.dependsOn(generateAutotestFile)
  runAutotest.dependsOn(locateArma3)
  runAutotest.dependsOn(setupProfile)
  runAutotest.mustRunAfter(downloadMods)

  task moveLogFile << {
    def logsDir = file('logs')
    def localAppData = System.getenv('LOCALAPPDATA')
    def logFiles = file("${localAppData}/Arma 3").listFiles().findAll { it.name.startsWith('arma3_') && it.name.endsWith('.rpt') }
    File source = logFiles.sort().last()
    File destination = file(Paths.get(logsDir.getAbsolutePath(), "${mod}.rpt").toString())
    delete logsDir
    mkdir logsDir
    FileUtils.moveFile(source, destination)
  }

  task moveScreenshots << {
    def userProfileDir = System.getenv('USERPROFILE')
    def source = file("${userProfileDir}/Documents/Arma 3 - Other Profiles/${armaProfile}/Screenshots")
    def destination = file('screenshots')
    delete destination
    FileUtils.moveDirectory(source, destination)
  }
}
